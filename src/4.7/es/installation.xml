<?xml version="1.0" encoding="utf-8" ?>

<chapter id="installation">
  <title>Instalar PHPUnit</title>

  <section id="installation.requirements">
    <title>Requisitos</title>

    <para>
      PHPUnit 4.7 necesita PHP 5.3.3. Se recomienda encarecidamente usar la
      última versión de PHP.
    </para>

    <para>
      PHPUnit necesita la extensiones <ulink
      url="http://php.net/manual/es/dom.setup.php">dom</ulink> y <ulink
      url="http://php.net/manual/es/json.installation.php">json</ulink>, las
      cuales normalmente están habilitadas de forma predeterminada.
    </para>

    <para>
      PHPUnit también necesita las extensiones <ulink
      url="http://php.net/manual/es/pcre.installation.php">pcre</ulink>, <ulink
      url="http://php.net/manual/es/reflection.installation.php">reflection</ulink>,
      y <ulink url="http://php.net/manual/es/spl.installation.php">spl</ulink>.
      Éstas son requeridas por el núcleo de PHP (PHP core) desde 5.3.0 y
      normalmente no pueden ser deshabilitadas.
    </para>

    <para>
      La función de reporte de cobertura de código (code coverage) necesita las
      extensiones <ulink url="http://xdebug.org/">Xdebug</ulink> (2.1.3 o
      posterior) y <ulink
      url="http://php.net/manual/es/tokenizer.installation.php">tokenizer</ulink>.

      Para la generación de reportes XML se requiere la extensión <ulink
      url="http://php.net/manual/es/xmlwriter.installation.php">xmlwriter</ulink>.
    </para>
  </section>

  <section id="installation.phar">
    <title>Archivo PHP (PHAR)</title>

    <para>
      La manera más fácil de obtener PHPUnit es descargar un <ulink
      url="http://php.net/phar">Archivo PHP (PHAR)</ulink> que contiene todas
      las dependencias requeridas para PHPUnit (así como también algunas
      opcionales) empaquetadas en un solo archivo.
    </para>

    <para>
      Se necesita la extensión <ulink
      url="http://php.net/manual/es/phar.installation.php">phar</ulink> para
      usar Archivos PHP (PHAR).
    </para>

    <para>
      Se necesita la extensión <ulink
      url="http://php.net/manual/en/openssl.installation.php">openssl</ulink>
      para usar la función <literal>--self-update</literal> del PHAR.
    </para>

    <para>
      Si la extensión <ulink url="http://suhosin.org/">Suhosin</ulink> está
      habilitada, necesitarás permitir la ejecución de PHARs en tu
      <literal>php.ini</literal>:

      <screen>
suhosin.executor.include.whitelist = phar
</screen>
    </para>

    <note>
      <para>
        Para descargar desde <literal>https://phar.phpunit.de/</literal>
        necesitas un cliente con <ulink
        url="http://en.wikipedia.org/wiki/Server_Name_Indication">soporte
        TLS/SNI</ulink>; por ejemplo, wget 1.14 (o posterior).
      </para>
    </note>

    <para>
      Para instalar el PHAR globalmente:
    </para>

    <screen>
<prompt>$</prompt> <userinput>wget https://phar.phpunit.de/phpunit.phar</userinput>
<prompt>$</prompt> <userinput>chmod +x phpunit.phar</userinput>
<prompt>$</prompt> <userinput>sudo mv phpunit.phar /usr/local/bin/phpunit</userinput>
<prompt>$</prompt> <userinput>phpunit --version</userinput>
<computeroutput>PHPUnit x.y.z by Sebastian Bergmann and contributors.</computeroutput>
</screen>

    <para>
      También podrías descargar el archivo PHAR directamente:
    </para>

    <screen>
<prompt>$</prompt> <userinput>wget https://phar.phpunit.de/phpunit.phar</userinput>
<prompt>$</prompt> <userinput>php phpunit.phar --version</userinput>
<computeroutput>PHPUnit x.y.z by Sebastian Bergmann and contributors.</computeroutput>
</screen>

    <section id="installation.phar.windows">
      <title>Windows</title>

      <para>
        Instalar el PHAR globalmente involucra el mismo procedimiento que <ulink url="https://getcomposer.org/doc/00-intro.md#installation-windows">
        instalar Composer en Windows</ulink> manualmente:
      </para>

      <orderedlist>
        <listitem>
          <para>
            Crea un directorio para los binarios PHP; p.ej, <filename>C:\bin</filename>
          </para>
        </listitem>
        <listitem>
          <para>
            Agrega <userinput>;C:\bin</userinput> a tu variable de entorno
             <varname>PATH</varname>
            (<ulink url="http://stackoverflow.com/questions/6318156/adding-python-path-on-windows-7">ayuda relacionada</ulink>)
          </para>
        </listitem>
        <listitem>
          <para>
            Descarga <ulink url="https://phar.phpunit.de/phpunit.phar"/> y guarda
            el archivo como <filename>C:\bin\phpunit.phar</filename>
          </para>
        </listitem>
        <listitem>
          <para>
            Abre una línea de comandos (por ejemplo,
            presiona <keycombo><keycap>Windows</keycap><keycap>R</keycap></keycombo>
            » escribe <userinput>cmd</userinput>
            » <keycap>ENTER</keycap>)
          </para>
        </listitem>
        <listitem>
          <para>
            Crea un script batch contenedor (resultando en
            <filename>C:\bin\phpunit.cmd</filename>):
          </para>
          <screen>
<prompt>C:\Users\username&gt;</prompt> <userinput>cd C:\bin</userinput>
<prompt>C:\bin&gt;</prompt> <userinput>echo @php "%~dp0phpunit.phar" %* &gt; phpunit.cmd</userinput>
<prompt>C:\bin&gt;</prompt> <userinput>exit</userinput>
</screen>
        </listitem>
        <listitem>
          <para>
            Abre una nueva línea de comandos y confirma que puedes ejecutar
            PHPUnit desde cualquier ruta:
          </para>
          <screen>
<prompt>C:\Users\username&gt;</prompt> <userinput>phpunit --version</userinput>
<computeroutput>PHPUnit x.y.z by Sebastian Bergmann and contributors.</computeroutput>
</screen>
        </listitem>
      </orderedlist>

      <para>
        Para entornos shell Cygwin y/o MingW32 (por ejemplo, TortoiseGit),
        puedes saltar el paso 5 de arriba; simplemente guarda el archivo como
        <filename>phpunit</filename> (sin extensión <filename>.phar</filename>),
        y hazlo ejecutable a través de <userinput>chmod 775 phpunit</userinput>.
      </para>

    </section>

    <section id="installation.phar.verification">
      <title>Verificando las versiones PHAR de PHPUnit</title>

      <para>
        Todos los lanzamientos de código distribuído por el Proyecto PHPUnit
        están firmadas por el encargado de la liberación (release manager) de la
        versión. Las firmas PGP y hashes SHA1 están disponibles para la
        verificación en <ulink url="https://phar.phpunit.de/">phar.phpunit.de</ulink>.
      </para>

      <para>
        El siguiente ejemplo detalla cómo funciona la verificación de versiones.
        Iniciamos descargando <filename>phpunit.phar</filename> así como también
        su firma PGP <filename>phpunit.phar.asc</filename> correspondiente:
      </para>

      <screen><userinput>wget https://phar.phpunit.de/phpunit.phar</userinput>
<userinput>wget https://phar.phpunit.de/phpunit.phar.asc</userinput></screen>

      <para>
        Queremos verificar el Archivo PHP de PHPUnit (<filename>phpunit.phar</filename>)
        contra su firma (<filename>phpunit.phar.asc</filename>) correspondiente:
      </para>

      <screen><userinput>gpg phpunit.phar.asc</userinput>
gpg: Signature made Sat 19 Jul 2014 01:28:02 PM CEST using RSA key ID 6372C20A
gpg: Can't check signature: public key not found</screen>

      <para>
        No tenemos la clave pública (<literal>6372C20A</literal>) del encargado
        de la liberación (release manager) en nuestro sistema local. Para
        proceder con la verificación necesitamos obtener esta clave pública de
        un servidor de claves. Uno de esos servidores es
        <filename>pgp.uni-mainz.de</filename>. Los servidores de claces públicas
        estan enlazados juntos, así que deberías ser capaz de conectarte a
        cualquier servidor de claves.
      </para>

      <screen><userinput>gpg --keyserver pgp.uni-mainz.de --recv-keys 0x4AA394086372C20A</userinput><![CDATA[
gpg: requesting key 6372C20A from hkp server pgp.uni-mainz.de
gpg: key 6372C20A: public key "Sebastian Bergmann <sb@sebastian-bergmann.de>" imported
gpg: Total number processed: 1
gpg:               imported: 1  (RSA: 1)]]></screen>

      <para>
        Ahora hemos recibido una clave pública para una entidad conocida como
        "Sebastian Bergmann &lt;sb@sebastian-bergmann.de&gt;". Aún así, no
        tenemos idea de cómo verificar que esta clave fue creada por la persona
        conocida como Sebastian Bergmann. Pero intentemos verificar la firma de
        la versión otra vez.
      </para>

      <screen><userinput>gpg phpunit.phar.asc</userinput><![CDATA[
gpg: Signature made Sat 19 Jul 2014 01:28:02 PM CEST using RSA key ID 6372C20A
gpg: Good signature from "Sebastian Bergmann <sb@sebastian-bergmann.de>"
gpg:                 aka "Sebastian Bergmann <sebastian@php.net>"
gpg:                 aka "Sebastian Bergmann <sebastian@thephp.cc>"
gpg:                 aka "Sebastian Bergmann <sebastian@phpunit.de>"
gpg:                 aka "Sebastian Bergmann <sebastian.bergmann@thephp.cc>"
gpg:                 aka "[jpeg image of size 40635]"
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: D840 6D0D 8294 7747 2937  7831 4AA3 9408 6372 C20A]]></screen>

      <para>
        En este punto, la firma es buena, pero no confiamos en esta clave. Una
        buena firma significa que el archivo no ha sido alterado. Aún así,
        debido a la naturaleza de la criptografía de la clave pública,
        adicionalmente necesitas verificar que la clave <literal>6372C20A</literal>
        fue creada por el verdadero Sebastian Bergmann.
      </para>

      <para>
        Cualquier atacante puede crear una clave pública y subirla a los
        servidores de claves públicas. Éstos pueden crear una versión maliciosa
        firmada por esta clave falsa. Entonces, si intentas verificar la firma
        de esta versión corrupta, podría pasar como exitosa debido a que la
        llave no era la "verdadera" llave. Por ello, tienes que validar la
        autenticidad de esta clave. Sin embargo, validar la autenticidad de una
        clave pública está fuera del ámbito de esta documentación.
      </para>

      <para>
        Tal vez sea prudente crear un script de shell que controle la
        instalación de PHPUnit y verifique la firma GnuPG antes de ejecutar tu
        suite de prueba (test suite). Por ejemplo:
      </para>

      <screen><![CDATA[
#!/usr/bin/env bash
clean=1 # Delete phpunit.phar after the tests are complete?
aftercmd="php phpunit.phar --bootstrap bootstrap.php src/tests"
gpg --fingerprint D8406D0D82947747293778314AA394086372C20A
if [ $? -ne 0 ]; then
    echo -e "\033[33mDownloading PGP Public Key...\033[0m"
    gpg --recv-keys D8406D0D82947747293778314AA394086372C20A
    # Sebastian Bergmann <sb@sebastian-bergmann.de>
    gpg --fingerprint D8406D0D82947747293778314AA394086372C20A
    if [ $? -ne 0 ]; then
        echo -e "\033[31mCould not download PGP public key for verification\033[0m"
        exit
    fi
fi

if [ "$clean" -eq 1 ]; then
    # Let's clean them up, if they exist
    if [ -f phpunit.phar ]; then
        rm -f phpunit.phar
    fi
    if [ -f phpunit.phar.asc ]; then
        rm -f phpunit.phar.asc
    fi
fi

# Let's grab the latest release and its signature
if [ ! -f phpunit.phar ]; then
    wget https://phar.phpunit.de/phpunit.phar
fi
if [ ! -f phpunit.phar.asc ]; then
    wget https://phar.phpunit.de/phpunit.phar.asc
fi

# Verify before running
gpg --verify phpunit.phar.asc phpunit.phar
if [ $? -eq 0 ]; then
    echo
    echo -e "\033[33mBegin Unit Testing\033[0m"
    # Run the testing suite
    `$after_cmd`
    # Cleanup
    if [ "$clean" -eq 1 ]; then
        echo -e "\033[32mCleaning Up!\033[0m"
        rm -f phpunit.phar
        rm -f phpunit.phar.asc
    fi
else
    echo
    chmod -x phpunit.phar
    mv phpunit.phar /tmp/bad-phpunit.phar
    mv phpunit.phar.asc /tmp/bad-phpunit.phar.asc
    echo -e "\033[31mSignature did not match! PHPUnit has been moved to /tmp/bad-phpunit.phar\033[0m"
    exit 1
fi
      ]]></screen>
   </section>
  </section>

  <section id="installation.composer">
    <title>Composer</title>

    <para>
      Simplemente agrega <literal>phpunit/phpunit</literal> como dependencia
      en el archivo <literal>composer.json</literal> de tu proyecto si usas
      <ulink url="https://getcomposer.org/">Composer</ulink> para controlar las
      dependencias de tu proyecto. Aquí está un ejemplo mínimo de un archivo
      <literal>composer.json</literal> que simplemente defina una dependencia
      para tiempo de desarrollo sobre PHPUnit 4.7:
    </para>

    <programlisting><![CDATA[{
    "require-dev": {
        "phpunit/phpunit": "4.7.*"
    }
}]]></programlisting>

    <para>
      Para una instalación en el sistema a través de Composer, puedes ejecutar:
    </para>

    <screen><userinput>composer global require "phpunit/phpunit=4.7.*"</userinput></screen>

    <para>
      Asegúrate de que tienes <literal>~/.composer/vendor/bin/</literal> en tu
      ruta.
    </para>
  </section>

  <section id="installation.optional-packages">
    <title>Paquetes opcionales</title>

    <para>
      Los siguientes paquetes opcionales están disponibles:
    </para>

    <variablelist>
      <varlistentry>
        <term>
          <literal>PHP_Invoker</literal>
        </term>

        <listitem>
          <para>
            Una clase utilitaria para invocar callables con un tiempo de espera
            (timeout). Este paquete se necesita para imponer tiempos de espera
            (timeouts) de pruebas en modo estricto (strict mode).
          </para>

          <para>
            Este paquete viene incluido en la distribución PHAR de PHPUnit. Puede
            ser instalado a través de Composer agregando la siguiente
            dependencia <literal>"require-dev"</literal>:
          </para>

          <screen><userinput>"phpunit/php-invoker": "*"</userinput></screen>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <literal>DbUnit</literal>
        </term>

        <listitem>
          <para>
            Puerto DbUnit para PHP/PHPUnit para soportar interacción de pruebas
            con base de datos.
          </para>

          <para>
            Este paquete viene incluido en la distribución PHAR de PHPUnit. Puede
            ser instalado a través de Composer agregando la siguiente
            dependencia <literal>"require-dev"</literal>:
          </para>

          <screen><userinput>"phpunit/dbunit": ">=1.2"</userinput></screen>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <literal>PHPUnit_Selenium</literal>
        </term>

        <listitem>
          <para>
            Selenium RC integration for PHPUnit.
          </para>

          <para>
            Este paquete viene incluido en la distribución PHAR de PHPUnit. Puede
            ser instalado a través de Composer agregando la siguiente
            dependencia <literal>"require-dev"</literal>:
          </para>

          <screen><userinput>"phpunit/phpunit-selenium": ">=1.2"</userinput></screen>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
</chapter>
